{"version":3,"sources":["coreTable.js","table.js","App.js","serviceWorker.js","index.js"],"names":["coreTable","state","editMode","file","toggleState","_this","setState","edit","id","name","surname","company","props","editHandler","resetFile","onFormSubmit","event","preventDefault","fileUpload","then","response","loadHandler","onChangeFile","target","files","formData","FormData","append","concat","row","axios","post","headers","content-type","onChangeImageClick","inputFile","click","_this2","this","_this$props","deleteHandler","react_default","a","createElement","type","defaultValue","placeholder","ref","input","image","src","alt","height","onClick","value","onSubmit","onChange","style","display","Component","Table","data","addHandler","map","i","src_coreTable","key","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","loadData","get","console","log","deleteBtn","delete","addBtn","catch","error","editBtn","put","connecToServer","bind","assertThisInitialized","fetch","className","table","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6016653c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass coreTable extends Component {\n  state = { editMode: false, file: null };\n\n  toggleState = () => this.setState({ editMode: !this.state.editMode });\n\n  edit = (id, name, surname, company) => {\n    this.props.editHandler(id, name, surname, company);\n    this.setState({ editMode: false });\n  };\n\n  resetFile = () =>\n    this.setState({ file: null });\n\n  onFormSubmit = (event) => {\n    event.preventDefault()\n    this.fileUpload(this.state.file)\n      .then((response) => {\n        this.props.loadHandler();\n        this.resetFile();\n      })\n  }\n\n  onChangeFile = (event) => {\n    this.setState({ file: event.target.files[0] })\n  }\n\n  fileUpload = (file) => {\n    const url = 'http://localhost:3000/upload-image';\n    const formData = new FormData();\n    formData.append(`image-${this.props.row.id}`, file)\n    const config = {\n      headers: {\n        'content-type': 'multipart/form-data'\n      }\n    }\n    return axios.post(url, formData, config)\n  }\n\n  onChangeImageClick = (event) => {\n    event.preventDefault();\n    this.inputFile.click();\n  };\n\n  render() {\n    const { row, deleteHandler } = this.props;\n\n    if (this.state.editMode) {\n      return (\n        <tr>\n          <td />\n          <td>\n            <input\n              type=\"text\"\n              defaultValue={row.name}\n              placeholder=\"test\"\n              ref={input => (this.name = input)}\n            />\n          </td>\n          <td>\n            <input\n              type=\"text\"\n              defaultValue={row.surname}\n              placeholder=\"test\"\n              ref={input => (this.surname = input)}\n            />\n          </td>\n          <td>\n            <input\n              type=\"text\"\n              defaultValue={row.company}\n              placeholder=\"test\"\n              ref={input => (this.company = input)}\n            />\n          </td>\n          <td>\n            {row.image ? (\n              <img\n\t\t\t\t\t\t\t\tsrc={`http://localhost:3000/images/${row.image}`}\n                alt=\"avatar\"\n                height=\"80\"\n              />\n            ) : (\n                ''\n              )}\n          </td>\n          <td>\n            <button onClick={this.toggleState}>Cancel</button>\n          </td>\n          <td>\n            <button\n              onClick={() =>\n                this.edit(\n                  row.id,\n                  this.name.value,\n                  this.surname.value,\n                  this.company.value,\n                )\n              }\n            >\n              Save\n            </button>\n          </td>\n        </tr>\n      );\n    }\n    return (\n      <tr>\n        <td>{row.id}</td>\n        <td>{row.name}</td>\n        <td>{row.surname}</td>\n        <td>{row.company}</td>\n        <td>\n          {row.image ? (\n            <img\n\t\t\t\t\t\t\tsrc={`http://localhost:3000/images/${row.image}`}\n              alt=\"avatar\"\n              height=\"80\"\n            />\n          ) : (\n              ''\n            )}\n        </td>\n        <td>\n          <button onClick={this.toggleState}>Edit</button>\n        </td>\n        <td>\n          <button onClick={() => deleteHandler(row.id)}>Delete</button>\n        </td>\n        <td>\n          <form onSubmit={this.onFormSubmit} >\n            <input type=\"file\"\n              onChange={this.onChangeFile}\n              ref={input => this.inputFile = input}\n              style={{ display: 'none' }} />\n            {!this.state.file && <button name=\"add\"\n              onClick={this.onChangeImageClick}\n            >Change Image</button>}\n            {this.state.file && <button type=\"submit\">Upload</button>}\n            {this.state.file && <button onClick={this.resetFile}>Cancel</button>}\n          </form>\n        </td>\n      </tr>\n    );\n  }\n}\n\nexport default coreTable;\n","import React, { Component } from 'react';\nimport CoreTable from './coreTable';\n\nclass Table extends Component {\n  render() {\n    const { data, deleteHandler, addHandler, editHandler, loadHandler } = this.props;\n\n    return (\n      <table>\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>Name</th>\n            <th>Surname</th>\n            <th>Company</th>\n            <th>Avatar</th>\n            <th />\n            <th />\n            <th />\n          </tr>\n        </thead>\n        <tbody>\n          {data.map((row, i) => (\n            <CoreTable\n              key={i}\n              row={row}\n              deleteHandler={deleteHandler}\n              editHandler={editHandler}\n              loadHandler={loadHandler}\n            />\n          ))}\n          <tr>\n            <td />\n            <td>\n              <input\n                type=\"text\"\n                defaultValue=\"\"\n                ref={input => (this.name = input)}\n              />\n            </td>\n            <td>\n              <input\n                type=\"text\"\n                defaultValue=\"\"\n                ref={input => (this.surname = input)}\n              />\n            </td>\n            <td>\n              <input\n                type=\"text\"\n                defaultValue=\"\"\n                ref={input => (this.company = input)}\n              />\n            </td>\n            <td>&nbsp;</td>\n            <td>\n              <button\n                onClick={() =>\n                  addHandler(\n                    this.name.value,\n                    this.surname.value,\n                    this.company.value,\n                  )\n                }\n              >\n                Add\n              </button>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default Table;\n","import React, { Component } from 'react';\nimport Table from './table';\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\t\tthis.state = { data: [] };\n\t\tthis.connecToServer = this.connecToServer.bind(this)\n\t}\n\n\tconnecToServer() {\n    fetch('/');\n  }\n\n  componentDidMount() {\n\t\tthis.connecToServer();\n    this.loadData();\n  }\n\n  loadData = () =>\n    axios.get('http://localhost:3000/persons').then(response => {\n      this.setState({\n        data: response.data,\n      });\n      console.log(111111111111111)\n    });\n\n  deleteBtn = id => {\n    axios.delete(`http://localhost:3000/persons/${id}`).then(response => {\n      this.setState({\n        data: response.data,\n      });\n    });\n  };\n\n  addBtn = (name, surname, company) => {\n    axios\n      .post('/persons', {\n        name,\n        surname,\n        company,\n      })\n      .then(response => {\n        this.setState({\n          data: response.data,\n        });\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  };\n\n  editBtn = (id, name, surname, company) => {\n    axios\n      .put(`http://localhost:3000//persons/${id}`, {\n        name,\n        surname,\n        company,\n      })\n      .then(response => {\n        this.setState({\n          data: response.data,\n        });\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Table\n          data={this.state.data}\n          deleteHandler={this.deleteBtn}\n          addHandler={this.addBtn}\n          editHandler={this.editBtn}\n          loadHandler={this.loadData}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}